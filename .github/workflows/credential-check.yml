name: Credential Scan

on:
  pull_request:
    branches: [main]
  push:
  workflow_dispatch:
  schedule:
    - cron: "0 4 * * *" # run once a day at 4 AM

jobs:
  gitleaks:
    name: Run Gitleaks
    runs-on: ubuntu-latest
    outputs:
      leaks_found: ${{ steps.summary.outputs.leaks_found }}
      leak_count: ${{ steps.summary.outputs.leak_count }}
      leak_details: ${{ steps.summary.outputs.leak_details }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          fail: false  # We'll handle failure ourselves after creating summary
          report-format: json
          report-path: gitleaks-report.json
          continue-on-error: true

      - name: Generate summary from results
        id: summary
        if: always()
        run: |
          if [ -f gitleaks-report.json ]; then
            # Count number of findings
            LEAK_COUNT=$(jq 'length' gitleaks-report.json)
            
            # Set output variables
            echo "leak_count=$LEAK_COUNT" >> $GITHUB_OUTPUT
            
            if [ "$LEAK_COUNT" -gt 0 ]; then
              echo "leaks_found=true" >> $GITHUB_OUTPUT
              
              # Create a summary of findings (without exposing actual secrets)
              echo "### ⚠️ Credential Scan Results: $LEAK_COUNT potential credential(s) found" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Secret Type | File | Line | Commit |" >> $GITHUB_STEP_SUMMARY
              echo "| --- | --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
              
              # Extract details for each finding and add to summary
              LEAK_DETAILS=$(jq -r '.[] | "| " + .Description + " | " + .File + " | " + (.Line|tostring) + " | " + .Commit + " |"' gitleaks-report.json)
              echo "$LEAK_DETAILS" >> $GITHUB_STEP_SUMMARY
              
              # Create a sanitized version of details for output
              SANITIZED_DETAILS=$(jq -r '[.[] | {secretType: .Description, file: .File, line: .Line}]' gitleaks-report.json)
              echo "leak_details=$SANITIZED_DETAILS" >> $GITHUB_OUTPUT
              
              # Create artifact for results
              echo "$LEAK_DETAILS" > leak-summary.txt
              
              # Fail the job if leaks were found
              exit 1
            else
              echo "leaks_found=false" >> $GITHUB_OUTPUT
              echo "leak_details=[]" >> $GITHUB_OUTPUT
              echo "### ✅ Credential Scan Results: No credentials found" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "leaks_found=false" >> $GITHUB_OUTPUT
            echo "leak_count=0" >> $GITHUB_OUTPUT
            echo "leak_details=[]" >> $GITHUB_OUTPUT
            echo "### ⚠️ Credential Scan: No results file found" >> $GITHUB_STEP_SUMMARY
          fi
        shell: bash

      - name: Upload scan results
        if: always() && steps.summary.outputs.leaks_found == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: credential-scan-results
          path: leak-summary.txt
          retention-days: 7

  # Optional job to send results to your CodeDraft website
  update-codedraft:
    name: Update CodeDraft Demo
    needs: gitleaks
    runs-on: ubuntu-latest
    if: always() # Run even if gitleaks job fails
    steps:
      - name: Update CodeDraft with scan results
        run: |
          LEAK_COUNT="${{ needs.gitleaks.outputs.leak_count }}"
          LEAKS_FOUND="${{ needs.gitleaks.outputs.leaks_found }}"
          LEAK_DETAILS='${{ needs.gitleaks.outputs.leak_details }}'
          
          echo "Leak Count: $LEAK_COUNT"
          echo "Leaks Found: $LEAKS_FOUND"
          echo "Leak Details: $LEAK_DETAILS"
          
          # Here you would call an API endpoint in your CodeDraft website to update the demo
          # For example, using curl to POST the results:
          # curl -X POST https://your-codedraft-api.com/update-devops-demo \
          #   -H "Content-Type: application/json" \
          #   -d "{\"scan_type\":\"credentials\",\"leaks_found\":\"$LEAKS_FOUND\",\"leak_count\":\"$LEAK_COUNT\",\"details\":$LEAK_DETAILS}"
        shell: bash
